{"version":3,"sources":["components/ZipCodeView.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["ZipCodeView","props","_props$result","result","City","State","Country","Zipcode","Lat","Long","TotalWages","EstimatedPopulation","TaxReturnsFiled","react_default","a","createElement","Col","sm","md","size","offset","Card","body","CardTitle","CardText","jumboStyle","_jumboStyle","background","Object","defineProperty","Home","_useState","useState","_useState2","slicedToArray","results","setResults","_useState3","_useState4","zipCode","setZipCode","useEffect","zipRegex","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","test","axios","concat","sent","data","t0","alert","stop","apply","this","arguments","fetchData","Jumbotron","fluid","style","Container","Row","InputGroup","Input","id","placeholder","onChange","document","getElementById","value","InputGroupAddon","addonType","Button","color","onClick","map","components_ZipCodeView","key","RecordNumber","App","className","pages_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e718ae8.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardTitle, CardText, Col } from \"reactstrap\";\n\nconst ZipCodeView = props => {\n  const {\n    City,\n    State,\n    Country,\n    Zipcode,\n    Lat,\n    Long,\n    TotalWages,\n    EstimatedPopulation,\n    TaxReturnsFiled\n  } = props.result;\n  return (\n    <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n      <Card body>\n        <CardTitle>\n          <h5>Zipcode: {Zipcode}</h5>\n        </CardTitle>\n        <CardText>\n          <strong>City</strong>: {City} <strong>State</strong>: {State}{\" \"}\n          <strong>Country</strong>: {Country}\n        </CardText>\n        <CardText>\n          <strong>Lat</strong>: {Lat} <strong>Long</strong>: {Long}\n        </CardText>\n        <CardText>\n          <strong>Estimated Population</strong>: {EstimatedPopulation}\n        </CardText>\n        <CardText>\n          <strong>Total Wages</strong>: ${TotalWages}{\" \"}\n          <strong>Tax Returns Filed</strong>: {TaxReturnsFiled}\n        </CardText>\n      </Card>\n      <br />\n    </Col>\n  );\n};\n\nexport default ZipCodeView;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  InputGroup,\n  InputGroupAddon,\n  Button,\n  Input,\n  Row,\n  Col,\n  Jumbotron,\n  Container\n} from \"reactstrap\";\n\nimport ZipCodeView from \"../components/ZipCodeView\";\n\nconst jumboStyle = {\n  background: \"#aa4b6b fixed center\" /* fallback for old browsers */,\n  background:\n    \"-webkit-linear-gradient(to right, #3b8d99, #6b6b83, #aa4b6b) fixed center\" /* Chrome 10-25, Safari 5.1-6 */,\n  background:\n    \"linear-gradient(to right, #3b8d99, #6b6b83, #aa4b6b) fixed center\" /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\n};\n\nconst Home = () => {\n  const [results, setResults] = useState([]);\n  const [zipCode, setZipCode] = useState();\n\n  useEffect(() => {\n    let zipRegex = /\\d{5}/g;\n    const fetchData = async () => {\n      if (zipCode && zipRegex.test(zipCode)) {\n        try {\n          const result = await axios(\n            `https://ctp-zip-api.herokuapp.com/zip/${zipCode}`\n          );\n\n          setResults(result.data);\n        } catch (error) {\n          alert(error);\n        }\n      }\n    };\n    fetchData();\n  }, [zipCode]);\n\n  return (\n    <div>\n      <Jumbotron fluid style={jumboStyle}>\n        <Container fluid>\n          <Row>\n            <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n              <InputGroup>\n                <Input\n                  id=\"Zip\"\n                  placeholder=\"Enter Zip Code\"\n                  onChange={() => {\n                    setZipCode(document.getElementById(\"Zip\").value);\n                  }}\n                />\n                <InputGroupAddon addonType=\"append\">\n                  <Button\n                    color=\"secondary\"\n                    onClick={() => {\n                      setZipCode(document.getElementById(\"Zip\").value);\n                    }}\n                  >\n                    Search\n                  </Button>\n                </InputGroupAddon>\n              </InputGroup>\n            </Col>\n          </Row>\n        </Container>\n      </Jumbotron>\n      {results.map(result => (\n        <ZipCodeView key={result.RecordNumber} result={result} />\n      ))}\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}